<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ビジネスマンシューティング</title>
<style>
  body { margin:0; overflow:hidden; background:#eee; }
  canvas { display:block; background:#222; }
</style>
</head>
<body>
<canvas id="gameCanvas"></canvas>
<script>
// Canvas setup
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

// Load assets
const playerImg = new Image();
playerImg.src = './D882C5C2-0451-4C36-B654-44E14BD5A680.png'; // 背景透過済みサラリーマンアイコン

// Document icon for enemies (same as before)
const docImg = new Image();
docImg.src = 'data:image/svg+xml;base64,' + btoa(`
<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40">
  <rect x="5" y="5" width="30" height="40" fill="#FFF" stroke="#111"/>
  <line x1="10" y1="15" x2="30" y2="15" stroke="#111" stroke-width="2"/>
  <line x1="10" y1="23" x2="30" y2="23" stroke="#111" stroke-width="2"/>
  <line x1="10" y1="31" x2="30" y2="31" stroke="#111" stroke-width="2"/>
</svg>
`);

// Nutrition drink icon for power-ups
const powerUpImg = new Image();
powerUpImg.src = 'data:image/svg+xml;base64,' + btoa(`
<svg xmlns="http://www.w3.org/2000/svg" width="30" height="40">
  <rect x="8" y="5" width="14" height="30" rx="4" ry="4" fill="#FFDC00" stroke="#B8860B" stroke-width="2"/>
  <rect x="12" y="9" width="6" height="4" fill="#fff"/>
  <text x="15" y="28" font-size="12" text-anchor="middle" fill="#B8860B">栄養</text>
</svg>
`);

// Audio context and pop explosion sound
const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
function playHitSound() {
  const bufferSize = audioCtx.sampleRate * 0.1;
  const buffer = audioCtx.createBuffer(1, bufferSize, audioCtx.sampleRate);
  const data = buffer.getChannelData(0);
  for (let i = 0; i < bufferSize; i++) data[i] = (Math.random() * 2 - 1) * Math.exp(-3 * i / bufferSize);
  const noise = audioCtx.createBufferSource();
  noise.buffer = buffer;
  noise.connect(audioCtx.destination);
  noise.start();
}

// Game state
let player = { x: 50, y: canvas.height/2 - 25, width: 50, height: 50, speed: 5 };
let bullets = [];
let enemies = [];
let powerUps = [];
let keys = {};
let fireRate = 500;
let lastFireTime = 0;
let score = 0;

// Input handling
window.addEventListener('keydown', e => keys[e.code] = true);
window.addEventListener('keyup', e => keys[e.code] = false);

// Enemy spawn
setInterval(() => {
  const size = 40;
  enemies.push({ x: canvas.width, y: Math.random() * (canvas.height - size), width: size, height: size, speed: Math.random() * 2 + 2 });
}, 1000);

// Power-up spawn
setInterval(() => {
  const size = 30;
  powerUps.push({ x: canvas.width, y: Math.random() * (canvas.height - size), width: size, height: size, speed: 2 });
}, 15000);

// Update
function update() {
  // Movement
  if (keys['ArrowUp'] && player.y > 0) player.y -= player.speed;
  if (keys['ArrowDown'] && player.y + player.height < canvas.height) player.y += player.speed;
  if (keys['ArrowLeft'] && player.x > 0) player.x -= player.speed;
  if (keys['ArrowRight'] && player.x + player.width < canvas.width) player.x += player.speed;

  // Fire
  if (keys['Space']) {
    const now = Date.now();
    if (now - lastFireTime > fireRate) {
      bullets.push({ x: player.x + player.width, y: player.y + player.height/2 - 5, width: 10, height: 10, speed: 7 });
      lastFireTime = now;
    }
  }

  // Move bullets
  bullets = bullets.filter(b => b.x < canvas.width);
  bullets.forEach(b => b.x += b.speed);

  // Move enemies & collisions
  enemies = enemies.filter(e => e.x + e.width > 0);
  enemies.forEach((e, ei) => {
    e.x -= e.speed;
    bullets.forEach((b, bi) => {
      if (b.x < e.x + e.width && b.x + b.width > e.x && b.y < e.y + e.height && b.y + b.height > e.y) {
        enemies.splice(ei, 1);
        bullets.splice(bi, 1);
        score += 10;
        playHitSound();
      }
    });
    if (player.x < e.x + e.width && player.x + player.width > e.x && player.y < e.y + e.height && player.y + player.height > e.y) {
      alert('Game Over! Score: ' + score);
      location.reload();
    }
  });

  // Move power-ups & pickup
  powerUps = powerUps.filter(p => p.x + p.width > 0);
  powerUps.forEach((p, pi) => {
    p.x -= p.speed;
    if (player.x < p.x + p.width && player.x + player.width > p.x && player.y < p.y + p.height && player.y + player.height > p.y) {
      powerUps.splice(pi, 1);
      fireRate = Math.max(100, fireRate - 100);
    }
  });
}

// Draw
function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.drawImage(playerImg, player.x, player.y, player.width, player.height);
  ctx.fillStyle = 'yellow'; // bullets
  bullets.forEach(b => ctx.fillRect(b.x, b.y, b.width, b.height));
  enemies.forEach(e => ctx.drawImage(docImg, e.x, e.y, e.width, e.height));
  powerUps.forEach(p => ctx.drawImage(powerUpImg, p.x, p.y, p.width, p.height));
  ctx.fillStyle = 'white'; ctx.font = '20px sans-serif'; ctx.fillText('Score: ' + score, 10, 30);
}

// Loop
(function loop() { update(); draw(); requestAnimationFrame(loop); })();
</script>
</body>
</html>
